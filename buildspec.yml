version: 0.1
phases:
  pre_build:
    commands:
      - env
      - find .
      - aws codepipeline --region us-east-1 get-pipeline-state --name "$REPOSITORY_NAME" --query 'stageStates[?actionStates[0].latestExecution.externalExecutionId==`'$CODEBUILD_BUILD_ID'`]'.latestExecution.pipelineExecutionId --output=text | tee /tmp/execution_id.txt
      - aws codepipeline get-pipeline-execution --pipeline-name "$REPOSITORY_NAME" --pipeline-execution-id $(cat /tmp/execution_id.txt) --query 'pipelineExecution.artifactRevisions[0].revisionId' --output=text | tee /tmp/tag.txt
      - printf "%s:%s" "$REPOSITORY_URI" "$(cat /tmp/tag.txt)" | tee /tmp/build_tag.txt
      - printf '{"tag":"%s"}' "$(cat /tmp/tag.txt)" | tee /tmp/build.json
      - $(aws ecr get-login)
  build:
    commands:
      - docker build -t "$(cat /tmp/build_tag.txt)" .
  post_build:
    commands:
      - docker push "$(cat /tmp/build_tag.txt)"
      - aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag="$(cat /tmp/tag.txt)" --query 'images[].imageManifest' --output text | tee /tmp/latest_manifest.json
      - aws ecr put-image --repository-name $REPOSITORY_NAME --image-tag latest --image-manifest $(cat /tmp/latest_manifest.json)
artifacts:
  files: /tmp/build.json
  discard-paths: yes
