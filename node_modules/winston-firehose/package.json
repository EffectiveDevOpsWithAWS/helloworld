{
  "name": "winston-firehose",
  "version": "1.0.6",
  "description": "Winston logging transport for logging into Amazon AWS Firehose",
  "main": "lib/index.js",
  "scripts": {
    "build": "babel src -d lib",
    "test": "npm run lint && JASMINE_CONFIG_PATH=spec/support/jasmine.json jasmine",
    "prepublish": "npm run build",
    "lint": "eslint src spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pkallos/winston-firehose.git"
  },
  "keywords": [
    "winston",
    "firehose"
  ],
  "author": {
    "name": "Phil Kallos"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/pkallos/winston-firehose/issues"
  },
  "homepage": "https://github.com/pkallos/winston-firehose#readme",
  "dependencies": {
    "aws-sdk": "^2.3.14",
    "bluebird": "^3.4.0",
    "winston": "^2.2.0"
  },
  "devDependencies": {
    "babel-cli": "^6.3.13",
    "babel-core": "^6.3.13",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "eslint": "^2.9.0",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.11.1",
    "eslint-plugin-jsx-a11y": "^1.2.0",
    "eslint-plugin-react": "^5.2.2",
    "jasmine-node": "^2.0.0"
  },
  "eslintConfig": {
    "extends": "airbnb",
    "env": {
      "node": true,
      "jasmine": true
    }
  },
  "readme": "[![Build Status](https://travis-ci.org/pkallos/winston-firehose.svg?branch=master)](https://travis-ci.org/pkallos/winston-firehose)\n\n# winston-firehose \n\nNodeJS module, winston logging transport which writes to AWS Firehose.\n\n## Usage\n\nYou can add this logger transport with the following code:\n\n```javascript\nvar winston = require('winston');\nvar WFirehose = require('winston-firehose');\n\n// register the transport\nvar logger = new (winston.Logger)({\n    transports: [\n      new WFirehose({\n        'streamName': 'firehose_stream_name',\n        'firehoseOptions': {\n          'region': 'us-east-1'\n        }\n      })\n    ]\n  });\n  \n// log away!!\n// with just a string\nlogger.info('This is the log message!');\n\n// or with meta info\nlogger.info('This is the log message!', { snakes: 'delicious' }); \n```\n\nThis will write messages as strings (using JSON.stringify) into Firehose in the following format:\n```\n{\n  timestamp: 2016-05-20T22:48:01.106Z,\n  level: \"info\",\n  message: \"This is the log message!\",\n  meta: { snakes: \"delicious\" }\n};\n```\n\n## Options\n\n`streamName (string) - required` The name of the Firehose stream to write to.\n\n`firehoseOptions (object) - optional/suggested` The Firehose options that are passed directly to the constructor,\n [documented by AWS here](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Firehose.html#constructor-property)\n\n## Details\n\nAt the moment this logger sends (unacknowledged!) log messages into firehose. Right now the behavior if the log\nmessage fails to write to Firehose is simply to do absolutely nothing and fail silently.\n",
  "readmeFilename": "README.md",
  "_id": "winston-firehose@1.0.6",
  "dist": {
    "shasum": "6000d4b8062e9b95b3f920024701c025ab3dc3d2"
  },
  "_from": "winston-firehose@1.0.6",
  "_resolved": "https://registry.npmjs.org/winston-firehose/-/winston-firehose-1.0.6.tgz"
}
